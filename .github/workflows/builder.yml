---
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

jobs:
  information:
    name: Gather add-on information
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.information.outputs.architectures }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      name: ${{ steps.information.outputs.name }}
      slug: ${{ steps.information.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run add-on information action
        id: information
        uses: frenck/action-addon-information@v1.4.2
        with:
          path: "argonOne/"

  lint-addon:
    name: Lint Add-on
    needs:
      - information
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run Add-on Lint
        uses: frenck/action-addon-linter@v2
        with:
          path: "./${{ needs.information.outputs.target }}"

  lint-hadolint:
    name: Hadolint
    needs:
      - information
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run Hadolint
        uses: brpaz/hadolint-action@v1.4.0
        with:
          dockerfile: "./${{ needs.information.outputs.target }}/Dockerfile"

  lint-json:
    name: JSON Lint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run JQ
        run: |
          shopt -s globstar
          cat **/*.json | jq '.'

  lint-markdown:
    name: MarkdownLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run mdl
        uses: actionshub/markdownlint@v3.1.4

  lint-shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run Shellcheck
        uses: ludeeus/action-shellcheck@2.0.0
        env:
          SHELLCHECK_OPTS: -s bash -e SC2206 -e SC1105 -e SC2046 -e SC2261

  lint-prettier:
    name: Prettier
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run Prettier
        uses: creyD/prettier_action@v3.3
        with:
          prettier_options: --write **/*.{json,js,md,yaml}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build ${{ matrix.architecture }}
    needs:
      - information
      - lint-addon
      - lint-hadolint
      - lint-json
      - lint-markdown
      - lint-prettier
      - lint-shellcheck
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: ${{ fromJson(needs.information.outputs.architectures) }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🏗 Set up build cache
        id: cache
        uses: actions/cache@v4
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ matrix.architecture }}
      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v3.4.0
      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0
      - name: 🏗 Set up Codenotary Community Attestation Service (CAS)
        uses: frenck/action-setup-cas@v0.1.1
        with:
          version: v1.0.3
      - name: ℹ️ Compose build flags
        id: flags
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"
          from=$(yq --no-colors eval ".build_from.${{ matrix.architecture }}" "${{ needs.information.outputs.build }}")
          echo "from=${from}" >> "$GITHUB_OUTPUT"
          # Platform logic
          if [[ "${{ matrix.architecture }}" == "amd64" ]]; then
            echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" == "armhf" ]]; then
            echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" == "armv7" ]]; then
            echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" == "aarch64" ]]; then
            echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi
      - name: ℹ️ Get Version
        id: version
        run: |
          # Fetch version from release tag (if release event)
          if [[ "${{ github.event_name }}" == "release" ]]; then
            version="${{ github.event.release.tag_name }}"
            version="${version,,}"
            version="${version#v}"  # Remove 'v' if present
          else
            # Use commit hash for non-release events
            version="${{ github.sha }}"
          fi
          echo "version=$version" >> "$GITHUB_ENV"
          echo "version=$version" >> "$GITHUB_OUTPUT"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 🚀 Build and push
        uses: docker/build-push-action@v6.13.0
        with:
          push: true
          no-cache: true
          tags: ghcr.io/${{ github.repository_owner }}/homeassistantargononev3:${{ matrix.architecture }}-${{ steps.version.outputs.version }}
          context: ${{ needs.information.outputs.target }}
          file: ${{ needs.information.outputs.target }}/Dockerfile
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_DESCRIPTION=${{ needs.information.outputs.description }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_NAME=${{ needs.information.outputs.name }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ steps.version.outputs.version }}
