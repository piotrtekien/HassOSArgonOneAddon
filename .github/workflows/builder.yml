name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

jobs:
  information:
    name: Gather add-on information
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.set_outputs.outputs.architectures }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      name: ${{ steps.information.outputs.name }}
      slug: ${{ steps.information.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4.2.2

      - name: 🚀 Run add-on information action
        id: information
        uses: frenck/action-addon-information@v1.4.2
        with:
          path: "argonOne/"

      - name: 🛠 Ensure architectures is valid JSON
        id: set_outputs
        run: |
          arch_raw="${{ steps.information.outputs.architectures }}"
          
          # Convert space-separated values to JSON array if needed
          if [[ "$arch_raw" != "["* ]]; then
            arch_json=$(echo "$arch_raw" | jq -R 'split(" ")' | jq -c '.')
          else
            arch_json="$arch_raw"
          fi
          
          echo "architectures=$arch_json" >> "$GITHUB_ENV"
          echo "architectures=$arch_json" >> "$GITHUB_OUTPUT"

          echo "build=${{ steps.information.outputs.build }}" >> "$GITHUB_OUTPUT"
          echo "description=${{ steps.information.outputs.description }}" >> "$GITHUB_OUTPUT"
          echo "name=${{ steps.information.outputs.name }}" >> "$GITHUB_OUTPUT"
          echo "slug=${{ steps.information.outputs.slug }}" >> "$GITHUB_OUTPUT"
          echo "target=${{ steps.information.outputs.target }}" >> "$GITHUB_OUTPUT"

  build:
    name: Build for ${{ matrix.architecture }}
    needs: [information]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: ${{ fromJson(needs.information.outputs.architectures) }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4.2.2

      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v3.4.0

      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0

      - name: ℹ️ Get Version
        id: version
        run: |
          version=$(grep version: argonOne/config.yaml | sed 's/version: //')
          echo "version=$version" >> "$GITHUB_ENV"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Build and push
        uses: docker/build-push-action@v6.13.0
        with:
          push: true
          no-cache: true
          tags: ghcr.io/${{ github.repository_owner }}/homeassistantargononev3:${{ matrix.architecture }}-${{ env.version }}
          context: ${{ needs.information.outputs.target }}
          file: ${{ needs.information.outputs.target }}/Dockerfile
          platforms: linux/${{ matrix.architecture }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DESCRIPTION=${{ needs.information.outputs.description }}
            BUILD_NAME=${{ needs.information.outputs.name }}
            BUILD_VERSION=${{ env.version }}